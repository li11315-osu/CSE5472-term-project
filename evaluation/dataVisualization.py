# This script takes a JSON file in the format generated by serverEval.py
# and generates a set of charts that visualize the data
# Specify filename with --file argument
# Can optionally also specify a description of the setup, which will show up in the chart titles, with the --desc argument

import argparse
import json
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Functions for generating individual charts
# Each takes the data as a list of dicts as the main parameter
# The optional description is also passed in

# Range bar chart showing start and end times of each request
# Copies the format of the waterfall chart you see in the Network tab of the browser dev tools
# With successful requests shaded green and unsuccessful requests shaded red
def request_waterfall_bar_chart(data : list, desc : str = None):
    success_color = "green"
    fail_color = "red"

    plt.barh(
        y=range(len(data)),
        width=[request["response_time"] for request in data],
        left=[request["start_time"] for request in data],
        color=[success_color if request["success"] else fail_color for request in data]
        )
    plt.gca().invert_yaxis()
    
    plt.ylabel("Request #")
    plt.xlabel("Time (ms)")
    plt.title("Request Timings" + ((" (" + str(desc) + ")") if desc is not None else ""))

    # Red = fail and green = success should be fairly obvious, but we should include it in the legend anyways
    plt.legend(handles=[
        mpatches.Patch(color=success_color, label="Successful Request"),
        mpatches.Patch(color=fail_color, label="Timeout")], 
        loc='lower left')
    
    # Add text to list summary statistics
    success_rate = get_request_success_rate(data)
    avg_successful_response_time = get_avg_successful_response_time(data)
    text_content = "Request Success Rate:\n" + str(round((success_rate * 100), 2)) + "%"
    text_content += "\n\nAverage Response Time\n(for Successful Requests):\n" + ((str(round(avg_successful_response_time)) + "ms") if avg_successful_response_time is not None else "N/A")
    text_x = 0.7 # Have text show up in the top right, where there should be open space
    text_y = 0.7
    plt.text(text_x, text_y, text_content, 
             transform=plt.gca().transAxes, # Position text relative to axis size
             fontsize="10")

    plt.show()

# Functions for getting summary statistics
# Each one takes the data array as the parameter
def get_request_success_rate(data : list):
    return len([request for request in data if request["success"]]) / len(data)
def get_avg_successful_response_time(data : list):
    successful_requests = [request for request in data if request["success"]]
    if len(successful_requests) > 0:
        return sum([request["response_time"] for request in successful_requests]) / len(successful_requests)
    else:
        return None # Avoid division by 0 if all requests failed

# Main routine: parse filename argument, load data, generate each chart, display summary statistics
def main(args):
    if args.file is None:
        print("Usage: dataVisualization.py --file=<filename>")
    else:
        data = json.load(open(args.file))
        request_waterfall_bar_chart(data, args.desc)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--file', default=None, type=str)
    parser.add_argument('--desc', default=None, type=str)
    args = parser.parse_args()
    main(args)